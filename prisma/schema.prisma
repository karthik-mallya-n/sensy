generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id         String                @id @default(cuid())
  branchedId String?
  model      String
  title      String                @default("New Chat")
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  userId     String
  messages   Message[]             @relation("ConversationMessages")
  pairs      MessageResponsePair[]

  conversation  Conversation?  @relation("branchedConversations", fields: [branchedId], references: [id], onUpdate: Cascade)
  conversations Conversation[] @relation("branchedConversations")

  @@index([userId])
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  contextSummary String        @default("")
  sender         MessageSender
  content        String
  createdAt      DateTime      @default(now())

  conversation Conversation @relation("ConversationMessages", fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userPair      MessageResponsePair? @relation("UserMessagePair")
  assistantPair MessageResponsePair? @relation("AssistantMessagePair")
}

model MessageResponsePair {
  id                 String   @id @default(cuid())
  conversationId     String
  userMessageId      String   @unique
  assistantMessageId String?  @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userMessage      Message      @relation("UserMessagePair", fields: [userMessageId], references: [id])
  assistantMessage Message?     @relation("AssistantMessagePair", fields: [assistantMessageId], references: [id])

  @@index([conversationId])
}

enum MessageSender {
  USER
  ASSISTANT
  SYSTEM
}
